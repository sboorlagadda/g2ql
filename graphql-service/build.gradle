buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id "java"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "org.springframework.boot" version "2.1.0.RELEASE"
}

version = '1.0'
sourceCompatibility = '1.8'
description = "Spring Boot GraphQL endpoint"

compileJava.dependsOn(processResources)

dependencies {
    compile(project(':geode-graphql'))
    //include domain classes
    compile project(':geode-graphql').sourceSets.test.output

    compile("org.springframework.boot:spring-boot-starter-web"){
        exclude module: 'spring-boot-starter-logging'
    }

    compile "org.apache.geode:geode-core:$geodeVersion"
    compile "com.graphql-java:graphql-java:11.0"
    compile("com.graphql-java:graphql-spring-boot-starter:5.0.2"){
        exclude module: 'spring-boot-starter-logging'
    }
    compile("com.graphql-java:graphiql-spring-boot-starter:5.0.2"){
        exclude module: 'spring-boot-starter-logging'
    }

    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.11.1"
    runtime "org.slf4j:jcl-over-slf4j:1.7.25"
    runtime "org.slf4j:jul-to-slf4j:1.7.25"

    testCompile 'junit:junit:4.11'
    testCompile 'org.assertj:assertj-core:3.9.0'
    testCompile "org.mockito:mockito-core:2.+"
    testCompile 'org.apache.httpcomponents:fluent-hc:4.5.1'

    testCompile "org.apache.geode:geode-core:$geodeVersion"
    testCompile project(':geode-graphql').sourceSets.test.output
    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion"){
        exclude module: 'spring-boot-starter-logging'
    }
}

task domainClassesJar(type: Jar, dependsOn: compileJava) {
    archiveName = "domain-classes.jar"
    from project(':geode-graphql').sourceSets.test.output
    include '**/domain/**/*'
}

def installDir = "$buildDir/apache-geode-${geodeVersion}"

task installGeode(type: Copy) {
    from tarTree(parent.configurations.geodeDistribution.singleFile)
    into buildDir
}

task cleanServer {
    doLast {
        delete 'locator'
        delete 'server'
    }
}
clean.finalizedBy cleanServer

def geodePath = "${System.env.PATH}${System.getProperty('path.separator')}${installDir}/bin"

task start(type: Exec, dependsOn: [installGeode, domainClassesJar, ':server-extension:shadowJar', cleanServer]) {
    workingDir projectDir
    environment 'GEODE_HOME', installDir
    environment 'PATH', geodePath
    commandLine 'sh', '-c', "gfsh run --file=${projectDir}/scripts/start.gfsh"
}

task stop(type: Exec, dependsOn: installGeode) {
    workingDir projectDir
    environment 'GEODE_HOME', installDir
    environment 'PATH', geodePath
    commandLine 'sh', '-c', "gfsh run --file=${projectDir}/scripts/stop.gfsh"
}

test {
    useJUnit {
        includeCategories 'org.g2ql.categories.UnitTest'
    }
}

task integrationTest(type:Test) {
    useJUnit {
        includeCategories 'org.g2ql.categories.IntegrationTest'
    }
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

task integrationTestWithSetup(dependsOn: [start, integrationTest, stop]) {
    integrationTest.mustRunAfter start
    stop.mustRunAfter integrationTest
}